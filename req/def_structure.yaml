- backend:
    - app:
        - api:
            - proposition:
                - __init__.py: '哲学的命題APIの初期化ファイル。
                              依存:
                                - core.nlp_engine
                                - core.logic_analyzer
                              エクスポート:
                                - router
                              クラス:
                                - PropositionConfig: 命題設定管理
                                  関数:
                                    - initialize_nlp(): NLP初期化
                                    - setup_analyzers(): 分析器設定'
                - router.py: '命題APIルートを定義するファイル。
                            依存:
                              - services.proposition_service
                              - schemas.proposition
                            エンドポイント:
                              - POST /propositions/analyze
                              - GET /propositions/history
                              - POST /propositions/validate
                              - GET /propositions/experiments
                            クラス:
                              - PropositionController: 命題制御ハンドラ
                                関数:
                                  - analyze_proposition(text: str) -> Analysis
                                  - get_history(user_id: str) -> List[Proposition]
                                  - validate_logic(proposition_id: str) -> ValidationResult
                                  - generate_experiment(proposition_id: str) -> Experiment'
            - concepts:
                - __init__.py: '概念分析APIの初期化ファイル。
                               依存:
                                 - core.concept_extractor
                                 - core.knowledge_base
                               エクスポート:
                                 - router
                               クラス:
                                 - ConceptConfig: 概念設定管理
                                   関数:
                                     - load_ontology(): オントロジー読み込み
                                     - setup_extractors(): 抽出器設定'
                - router.py: '概念APIルートを定義するファイル。
                            依存:
                              - services.concept_service
                              - schemas.concept
                            エンドポイント:
                              - POST /concepts/extract
                              - GET /concepts/relations
                              - GET /concepts/definition/{concept_id}
                            クラス:
                              - ConceptController: 概念制御ハンドラ
                                関数:
                                  - extract_concepts(text: str) -> List[Concept]
                                  - get_relations(concept_id: str) -> ConceptMap
                                  - get_definition(concept_id: str) -> Definition'
            - visualization:
                - __init__.py: '可視化APIの初期化ファイル。
                               依存:
                                 - core.graph_generator
                                 - core.layout_engine
                               エクスポート:
                                 - router
                               クラス:
                                 - VisualizationConfig: 可視化設定管理
                                   関数:
                                     - setup_renderers(): レンダラー設定
                                     - configure_layouts(): レイアウト設定'
                - router.py: '可視化APIルートを定義するファイル。
                            依存:
                              - services.visualization_service
                              - schemas.visualization
                            エンドポイント:
                              - POST /visualize/logic-tree
                              - POST /visualize/concept-map
                              - GET /visualize/export/{format}
                            クラス:
                              - VisualizationController: 可視化制御ハンドラ
                                関数:
                                  - create_logic_tree(analysis_id: str) -> Graph
                                  - create_concept_map(concepts: List[str]) -> Graph
                                  - export_visualization(viz_id: str, format: str) -> File'
        - core:
            - __init__.py: 'コアモジュールの初期化ファイル。'
            - nlp_engine.py: '自然言語処理エンジンを実装するファイル。
                            クラス:
                              - NLPEngine: 言語処理エンジン
                                関数:
                                  - parse_proposition(): 命題解析
                                  - extract_entities(): エンティティ抽出
                                  - analyze_structure(): 構造分析'
            - logic_analyzer.py: '論理分析エンジンを実装するファイル。
                                クラス:
                                  - LogicAnalyzer: 論理分析エンジン
                                    関数:
                                      - validate_logic(): 論理検証
                                      - identify_fallacies(): 誤謬特定
                                      - check_consistency(): 整合性確認'
            - concept_extractor.py: '概念抽出エンジンを実装するファイル。
                                   クラス:
                                     - ConceptExtractor: 概念抽出エンジン
                                       関数:
                                         - extract_main_concepts(): 主要概念抽出
                                         - analyze_relations(): 関係分析
                                         - build_concept_map(): 概念マップ構築'
        - models:
            - __init__.py: 'モデルの初期化ファイル。'
            - proposition.py: '命題モデルを定義するファイル。
                             クラス:
                               - Proposition: 命題モデル
                               - Analysis: 分析モデル
                               - LogicStructure: 論理構造モデル'
            - concept.py: '概念モデルを定義するファイル。
                          クラス:
                            - Concept: 概念モデル
                            - ConceptRelation: 関係モデル
                            - Definition: 定義モデル'
            - visualization.py: '可視化モデルを定義するファイル。
                               クラス:
                                 - Graph: グラフモデル
                                 - Node: ノードモデル
                                 - Edge: エッジモデル'
        - schemas:
            - __init__.py: 'スキーマの初期化ファイル。'
            - proposition.py: '命題スキーマを定義するファイル。
                             クラス:
                               - PropositionInput: 命題入力スキーマ
                               - AnalysisResult: 分析結果スキーマ
                               - ValidationResponse: 検証結果スキーマ'
            - concept.py: '概念スキーマを定義するファイル。
                          クラス:
                            - ConceptExtraction: 概念抽出スキーマ
                            - RelationMap: 関係マップスキーマ
                            - DefinitionResponse: 定義レスポンススキーマ'
            - visualization.py: '可視化スキーマを定義するファイル。
                               クラス:
                                 - GraphRequest: グラフリクエストスキーマ
                                 - GraphResponse: グラフレスポンススキーマ
                                 - ExportOptions: エクスポートオプションスキーマ'
- frontend:
    - app:
        - page.tsx: 'メインページコンポーネント。
                    依存:
                      - components/PropositionInput
                      - components/AnalysisView
                      - lib/api/proposition'
        - layout.tsx: 'レイアウトコンポーネント。
                      依存:
                        - components/Navigation
                        - components/ThemeToggle'
    - components:
        - PropositionInput.tsx: '命題入力コンポーネント。
                                依存:
                                  - lib/api/proposition
                                  - lib/hooks/useProposition'
        - AnalysisView.tsx: '分析表示コンポーネント。
                            依存:
                              - lib/api/visualization
                              - lib/hooks/useAnalysis'
        - ConceptMap.tsx: '概念マップコンポーネント。
                          依存:
                            - lib/api/concepts
                            - lib/hooks/useConcepts'
    - lib:
        - api:
            - proposition.ts: '命題API呼び出し関数。
                             依存:
                               - backend.api.proposition.router'
            - concepts.ts: '概念API呼び出し関数。
                          依存:
                            - backend.api.concepts.router'
            - visualization.ts: '可視化API呼び出し関数。
                               依存:
                                 - backend.api.visualization.router'
        - hooks:
            - useProposition.ts: '命題関連カスタムフック。
                                 依存:
                                   - lib/api/proposition'
            - useConcepts.ts: '概念関連カスタムフック。
                             依存:
                               - lib/api/concepts'
            - useVisualization.ts: '可視化関連カスタムフック。
                                  依存:
                                    - lib/api/visualization'