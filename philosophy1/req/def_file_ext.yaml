# 共通の制約を定義
anchors:
  python_constraints: &python_constraints
    - 'PEP 8スタイルガイドに従うこと'
    - 'type hintを使用すること'
    - '非同期処理にはasyncio/aioを使用すること'
    - 'ユニットテストを作成すること（カバレッジ80%以上）'
    - 'パフォーマンス最適化（非同期処理、キャッシュなど）を行うこと'

  next_constraints: &next_constraints
    - 'Next.js 13以上を使用すること'
    - 'TypeScriptを使用すること'
    - 'Server ComponentsとClient Componentsを適切に使い分けること'
    - 'レスポンシブデザインを実装すること'
    - 'SEO対策を実装すること'

  nlp_constraints: &nlp_constraints
    - 'compromise.jsを使用すること'
    - '自然言語処理の最適化を行うこと'
    - '多言語対応を実装すること'
    - 'カスタム辞書機能を実装すること'

  security_constraints: &security_constraints
    - 'クライアントサイドでの暗号化を実装すること'
    - 'IndexedDBのセキュリティを確保すること'
    - 'XSS対策を実装すること'
    - 'CSRF対策を実装すること'

rules:
  # フロントエンド規則
  '^frontend/.*\.(ts|tsx)$':
    - *next_constraints
    - *nlp_constraints
    - *security_constraints
    - 'app/layout.tsx': |
        依存:
          - components/Layout
          - contexts/ThemeContext
          - styles/globals.css
        機能:
          - RootLayoutの定義
          - メタデータの設定
          - テーマプロバイダーの設定

    - 'app/proposition/page.tsx': |
        依存:
          - components/PropositionAnalyzer
          - components/LogicTree
          - services/nlp/analyzer
        機能:
          - 命題入力フォーム
          - 論理構造分析表示
          - Server-side Rendering

    - 'components/LogicTree.tsx': |
        依存:
          - services/nlp/analyzer
          - types/Proposition
        機能:
          - 論理構造のツリー表示
          - インタラクティブな操作
          - ズーム/パン機能

    - 'services/nlp/analyzer.ts': |
        依存:
          - types/Proposition
          - utils/nlp
        関数:
          - analyzeProposition(text: string): Promise<Analysis>
          - extractConcepts(text: string): Promise<Concept[]>
          - validateLogic(analysis: Analysis): Promise<Validation>

    - 'types/Proposition.ts': |
        インターフェース:
          - Proposition
          - Analysis
          - Concept
          - LogicTree
          - Validation

データ連携:
  client_side:
    - 'analyzer.ts -> LogicTree.tsx':
        - 論理構造分析データ
        - 概念抽出結果
    - 'database.ts -> ConceptList.tsx':
        - 保存された概念データ
        - カスタム定義データ
    - 'validator.ts -> ValidationView.tsx':
        - 論理的妥当性チェック結果
        - 改善提案データ

non_functional_requirements:
  performance:
    - '命題解析の応答時間を500ms以内に抑える'
    - 'メモリ使用量の最適化'
    - '大量テキスト処理時のパフォーマンス確保'
  reliability:
    - 'オフライン動作の安定性確保'
    - 'データ保存の信頼性確保'
    - 'クラッシュ時の自動リカバリ'
  security:
    - 'ローカルデータの暗号化'
    - '安全なデータ保存'
    - 'プライバシー保護'
  frontend_specific:
    - 'First Contentful Paint 1.0秒以内'
    - 'Time to Interactive 1.5秒以内'
    - 'Lighthouse スコア95以上'